using StockIndicators.Internal;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace StockIndicators.Indicators;

/// <summary>
/// Settings for the <see cref="RelativeStrengthIndex"/> indicator.
/// </summary>
public sealed class RelativeStrengthIndexSettings
{
    /// <summary>
    /// Gets or sets the number of look-back periods.
    /// </summary>
    [DisplayName("Periods")]
    [Description("The number of look-back periods.")]
    [Range(1, 100)]
    [DefaultValue(14)]
    public int Periods { get; init; } = 14;
}

/// <summary>
/// The Relative Strength Index (RSI) is a momentum oscillator that measures the speed and change of price movements.
/// RSI oscillates between zero and 100. Traditionally, RSI is considered overbought when above 70 and oversold when below 30.
/// Signals can also be generated by looking for divergences, failure swings and centerline crossovers.
/// RSI can also be used to identify the general trend. (StockCharts.com)
/// </summary>
[DisplayName("RSI")]
[Description("Relative Strength Index")]
[Category(IndicatorCategory.Momentum)]
public sealed class RelativeStrengthIndex : IPriceIndicator, IChartProvider
{
    private readonly int periods;
    private double previous, averageGain, averageLoss;
    private int count;

    /// <summary>
    /// Initializes a new instance of the <see cref="RelativeStrengthIndex"/> class.
    /// </summary>
    /// <param name="capacity">The maximum number of values to keep in the output list.</param>
    public RelativeStrengthIndex(IndicatorCapacity capacity)
        : this(capacity, new RelativeStrengthIndexSettings())
    { }

    /// <summary>
    /// Initializes a new instance of the <see cref="RelativeStrengthIndex"/> class.
    /// </summary>
    /// <param name="capacity">The maximum number of values to keep in the output list.</param>
    /// <param name="settings">The indicator settings.</param>
    public RelativeStrengthIndex(IndicatorCapacity capacity, RelativeStrengthIndexSettings settings)
    {
        IndicatorValidator.Verify(capacity, settings);

        periods = settings.Periods;

        Values = capacity.CreateList<double>();
    }

    /// <summary>
    /// Gets the values for the indicator.
    /// </summary>
    public IReadOnlyList<double> Values { get; }

    /// <inheritdoc/>
    public bool IsReady => count >= periods;

    /// <inheritdoc/>
    public void Add(IPrice price)
    {
        double gain = 0d, loss = 0d;

        if (count > 0)
        {
            if (price.Close > previous)
                gain = price.Close - previous;

            if (price.Close < previous)
                loss = previous - price.Close;
        }

        if (count < periods)
        {
            averageGain += gain;
            averageLoss += loss;
        }
        else
        {
            if (count == periods)
            {
                averageGain = (averageGain + gain) / periods;
                averageLoss = (averageLoss + loss) / periods;
            }
            else
            {
                averageGain = (averageGain * (periods - 1) + gain) / periods;
                averageLoss = (averageLoss * (periods - 1) + loss) / periods;
            }

            if (averageLoss > 0)
                Values.Add(100d - 100d / (1d + averageGain / averageLoss));
            else
                Values.Add(100d);
        }

        previous = price.Close;
        count++;
    }

    /// <inheritdoc/>
    public Chart CreateChart()
    {
        return new Chart
        {
            Title = $"RSI ({periods})",
            ValueFormat = "N0",
            MinValue = 0,
            MaxValue = 100,
            AutoGenerateGridLines = false,
            GridLines =
            [
                new ChartGridLine(30),
                new ChartGridLine(50),
                new ChartGridLine(70)
            ],
            Highlights =
            [
                new ChartHighlight(0, 30),
                new ChartHighlight(70, 100)
            ],
            ValueSeries =
            [
                new ChartValueSeries(null, Values, ChartValueSeriesStyle.Line, ChartColor.Red)
            ]
        };
    }
}